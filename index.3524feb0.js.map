{"mappings":"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","sources":["src/js/simple-pagination/simple-pagination.js","src/js/partials/fetch-pixabay.js","src/js/simple-pagination/simple-pagi-flow.js"],"sourcesContent":["/**\n * Resourse:\n * https://jasonwatmore.com/post/2018/08/07/javascript-pure-pagination-logic-in-vanilla-js-typescript\n */\n\nexport const paginationRef = document.querySelector('.js-pagination');\n\nlet output;\nlet targetPage;\nlet currentPage = 1;\nlet totalPages;\n\n// Catches layout orientation changes (600px - to be suitable for old (8.34%) tablets)\nlet media = window.matchMedia('(min-width: 600px)');\n// Maximum number of page navigation links to display (does NOT include arrows)\nlet pagiLength = media.matches ? 9 : 5;\n\nmedia.addEventListener('change', event => {\n  pagiLength = event.matches ? 9 : 5;\n  updatePagination(currentPage, totalPages);\n});\n\n/**\n * Rerenders pagination line\n * @param {Number} page - the current active page\n * @param {Number} pages - the total number of pages\n */\nexport function updatePagination(page, pages) {\n  currentPage = page;\n  totalPages = pages;\n  output = paginate(currentPage, totalPages);\n  markupPagination(output, paginationRef);\n}\n\n/**\n * Finds out correct target page\n * @param {event} event click on button element\n * @returns currentPage\n */\nexport function getCurrentPage(event) {\n  if (event.target.nodeName !== 'BUTTON') return currentPage;\n  const targetPageText = event.target.textContent;\n\n  if (!isNaN(Number(targetPageText))) targetPage = Number(targetPageText);\n  if (targetPageText === '>' && currentPage === totalPages) return totalPages;\n  if (targetPageText === '>') targetPage = currentPage + 1;\n  if (targetPageText === '<' && currentPage === 1) return 1;\n  if (targetPageText === '<') targetPage = currentPage - 1;\n  if (targetPageText === ' ...') targetPage = currentPage - (pagiLength - 4);\n  if (targetPageText === '... ') targetPage = currentPage + (pagiLength - 4);\n  if (targetPage === currentPage) return currentPage;\n  currentPage = targetPage;\n  return currentPage;\n}\n\n/**\n * Form an array of chars to be displayed on pagination buttons\n * @param {Number} currentPage - the current active page\n * @param {Number} totalPages - the total number of pages\n * @returns {Array} of text content for buttons in pagination line\n */\nfunction paginate(currentPage, totalPages) {\n  const output = [];\n  let startPage;\n  let endPage;\n  const offsetPages = Math.floor(pagiLength / 2);\n  if (currentPage < 1) {\n    currentPage = 1;\n  } else if (currentPage > totalPages) {\n    currentPage = totalPages;\n  }\n  if (totalPages <= pagiLength) {\n    startPage = 1;\n    endPage = totalPages;\n  } else {\n    if (currentPage <= offsetPages) {\n      startPage = 1;\n      endPage = pagiLength;\n    } else if (currentPage + offsetPages >= totalPages) {\n      startPage = totalPages - offsetPages * 2;\n      endPage = totalPages;\n    } else {\n      startPage = currentPage - offsetPages;\n      endPage = currentPage + offsetPages;\n    }\n  }\n  for (let i = startPage; i <= endPage; i += 1) {\n    output.push(i);\n  }\n  if (pagiLength === 9) {\n    output.splice(0, 1, 1);\n    output.splice(output.length - 1, 1, totalPages);\n    if (currentPage - 1 > offsetPages && totalPages > pagiLength) {\n      output.splice(1, 1, ' ...');\n    }\n    if (currentPage + 1 + offsetPages < totalPages && totalPages > pagiLength)\n      output.splice(output.length - 2, 1, '... ');\n  }\n  return output;\n}\n\n/**\n * Marks up pagination line\n * @param {Array} output - text content for buttons in pagination line output\n * @param {DOM element} paginationRef - where to put pagination line\n */\nfunction markupPagination(output, paginationRef) {\n  let markup = output.reduce((acc, item) => {\n    const pagiClass =\n      item === currentPage\n        ? 'class=\"pagination-button pagination-button-current\"'\n        : 'class=\"pagination-button\"';\n    return (acc += `<button type=\"button\" ${pagiClass}>${item}</button>`);\n  }, ``);\n  if (totalPages > pagiLength && currentPage !== 1) {\n    markup =\n      `<button type=\"button\" class=\"pagination-button\">&lt;</button>` + markup;\n  }\n  if (totalPages > pagiLength && currentPage !== totalPages) {\n    markup += `<button type=\"button\" class=\"pagination-button\">&gt;</button>`;\n  }\n  paginationRef.innerHTML = '';\n  paginationRef.insertAdjacentHTML('beforeend', markup);\n}\n","const API_KEY = '32468715-2ee7d1cef437ed65ce73ff92a';\nconst BASE_URL = 'https://pixabay.com/api/';\n\nconst params = new URLSearchParams({\n  key: API_KEY,\n  image_type: 'photo',\n  orientation: 'horizontal',\n  safesearch: true,\n});\n\n/**\n *\n * @param {String} query - userInput\n * @param {Number} page - requested page\n * @param {Number} perPage - number of requested objects\n * @returns array of objects or error message\n */\nexport default async function fetchPixabay(query, page, perPage) {\n  try {\n    const responce = await fetch(\n      `${BASE_URL}?q=${query}&page=${page}&per_page=${perPage}&${params}`\n    );\n    return await responce.json();\n  } catch (error) {\n    return console.log('error :>> ', error);\n  }\n}\n","import {\n  updatePagination,\n  getCurrentPage,\n  paginationRef,\n} from './simple-pagination';\nimport fetchPixabay from '../partials/fetch-pixabay';\n\nlet totalPages = 100;\nlet currentPage = 1;\npaginationRef.addEventListener('click', onPaginationButtonClick);\n\nupdatePagination(currentPage, totalPages);\n\nasync function onPaginationButtonClick(event) {\n  currentPage = getCurrentPage(event);\n  //   updatePagination(currentPage, totalPages);\n  await updateMarkup();\n}\n\nlet userInput = '';\nconst perPage = 10;\nasync function updateMarkup() {\n  try {\n    const data = await fetchPixabay(userInput, currentPage, perPage);\n    if (!data.hits.length) return;\n\n    const { hits, totalHits } = data;\n    totalPages = Math.ceil(totalHits / perPage);\n\n    // if (currentPage === 1) {\n    //   gallery.innerHTML = '';\n    // }\n\n    // markupGallery(hits, gallery);\n    updatePagination(currentPage, totalPages);\n\n    currentPage += 1;\n  } catch (error) {\n    console.log('error :>> ', error);\n  }\n}\n"],"names":["$435250a0f83122cf$export$282ede1754680aae","document","querySelector","$435250a0f83122cf$var$output","$435250a0f83122cf$var$targetPage","$435250a0f83122cf$var$totalPages","$435250a0f83122cf$var$currentPage","$435250a0f83122cf$var$media","window","matchMedia","$435250a0f83122cf$var$pagiLength","matches","$435250a0f83122cf$export$909ec5aabce1b1f7","page","pages","currentPage1","totalPages1","output1","startPage","endPage","offsetPages","Math","floor","i","push","splice","length","$435250a0f83122cf$var$paginate","output2","paginationRef1","markup","reduce","acc","item","innerHTML","insertAdjacentHTML","$435250a0f83122cf$var$markupPagination","$435250a0f83122cf$export$7945ba8eb1c827e6","event","target","nodeName","targetPageText","textContent","isNaN","Number","addEventListener","$b97d44f28464450a$var$params","URLSearchParams","key","image_type","orientation","safesearch","async","$b97d44f28464450a$export$2e2bcd8739ae039","query","perPage","responce","fetch","json","error","console","log","$23b86c21d7617fd9$var$totalPages","$23b86c21d7617fd9$var$currentPage","data","hits","totalHits","ceil","$23b86c21d7617fd9$var$updateMarkup"],"version":3,"file":"index.3524feb0.js.map"}