{"mappings":"YAKO,IAGHA,EAEAC,EALSC,EAAgBC,SAASC,cAAc,eAIhDC,EAAc,EAIdC,EAAQC,OAAOC,WAAW,sBAE1BC,EAAaH,EAAMI,QAAU,EAAI,EAY9B,SAASC,EAAiBC,EAAMC,IA+EvC,SAA0BC,EAAQC,GAChC,IAAIC,EAASF,EAAOG,QAAO,SAACC,EAAKC,GAK/B,OAAQD,EAAO,yBAAsCE,OAHnDD,IAASd,EACL,sDACA,4BAC4C,KAAQe,OAALD,EAAK,Y,GACxD,IACAlB,EAAaQ,GAA8B,IAAhBJ,IAC7BW,EACE,gEAAkEA,GAElEf,EAAaQ,GAAcJ,IAAgBJ,IAC7Ce,GAAW,iEAEbD,EAAcM,UAAY,GAC1BN,EAAcO,mBAAmB,YAAaN,E,CA3F9CO,CA8BF,SAAkBC,EAAaC,GAC7B,IACIC,EACAC,EAFEC,EAAS,GAGTC,EAAcC,KAAKC,MAAMtB,EAAa,GACxCe,EAAc,EAChBA,EAAc,EACLA,EAAcC,IACvBD,EAAcC,GAEZA,GAAchB,GAChBiB,EAAY,EACZC,EAAUF,GAEND,GAAeK,GACjBH,EAAY,EACZC,EAAUlB,GACDe,EAAcK,GAAeJ,GACtCC,EAAYD,EAA2B,EAAdI,EACzBF,EAAUF,IAEVC,EAAYF,EAAcK,EAC1BF,EAAUH,EAAcK,GAG5B,IAAK,IAAIG,EAAIN,EAAWM,GAAKL,EAASK,GAAK,EACzCJ,EAAOK,KAAKD,GAEK,IAAfvB,IACFmB,EAAOM,OAAO,EAAG,EAAG,GACpBN,EAAOM,OAAON,EAAOO,OAAS,EAAG,EAAGV,GAChCD,EAAc,EAAIK,GAAeJ,EAAahB,GAChDmB,EAAOM,OAAO,EAAG,EAAG,QAElBV,EAAc,EAAIK,EAAcJ,GAAcA,EAAahB,GAC7DmB,EAAOM,OAAON,EAAOO,OAAS,EAAG,EAAG,SAExC,OAAOP,C,CApEEQ,CAFT/B,EAAcO,EACdX,EAAaY,GAEYX,E,CAQpB,SAASmC,EAAeC,GAC7B,GAA8B,WAA1BA,EAAMC,OAAOC,SAAuB,OAAOnC,EAC/C,IAAMoC,EAAiBH,EAAMC,OAAOG,YAGpC,OADKC,MAAMC,OAAOH,MAAkBzC,EAAa4C,OAAOH,IACjC,MAAnBA,GAA0BpC,IAAgBJ,EAAmBA,GAC1C,MAAnBwC,IAAwBzC,EAAaK,EAAc,GAChC,MAAnBoC,GAA0C,IAAhBpC,EAA0B,GACjC,MAAnBoC,IAAwBzC,EAAaK,EAAc,GAChC,SAAnBoC,IAA2BzC,EAAaK,GAAeI,EAAa,IACjD,SAAnBgC,IAA2BzC,EAAaK,GAAeI,EAAa,IACpET,IAAeK,EAAoBA,EACvCA,EAAcL,G,CAlChBM,EAAMuC,iBAAiB,UAAU,SAAAP,GAC/B7B,EAAa6B,EAAM5B,QAAU,EAAI,EACjCC,EAAiBN,EAAaJ,E,ICbhC,IACI6C,EAAc,EAClB5C,EAAc2C,iBAAiB,SAI/B,SAAiCP,GAE/B3B,EADAmC,EAAcT,EAAeC,GAPd,I,IAIjB3B,EAAiBmC,EAJA,I","sources":["src/js/simple-pagination/simple-pagination.js","src/js/simple-pagination/simple-pagi-flow.js"],"sourcesContent":["/**\n * Resourse:\n * https://jasonwatmore.com/post/2018/08/07/javascript-pure-pagination-logic-in-vanilla-js-typescript\n */\n\nexport const paginationRef = document.querySelector('.pagination');\n\nlet output;\nlet targetPage;\nlet currentPage = 1;\nlet totalPages;\n\n// Catches layout orientation changes (600px - to be suitable for old (8.34%) tablets)\nlet media = window.matchMedia('(min-width: 600px)');\n// Maximum number of page navigation links to display (does NOT include arrows)\nlet pagiLength = media.matches ? 9 : 5;\n\nmedia.addEventListener('change', event => {\n  pagiLength = event.matches ? 9 : 5;\n  updatePagination(currentPage, totalPages);\n});\n\n/**\n * Rerenders pagination line\n * @param {Number} page - the current active page\n * @param {Number} pages - the total number of pages\n */\nexport function updatePagination(page, pages) {\n  currentPage = page;\n  totalPages = pages;\n  output = paginate(currentPage, totalPages);\n  markupPagination(output, paginationRef);\n}\n\n/**\n * Finds out correct target page\n * @param {event} event click on button element\n * @returns currentPage\n */\nexport function getCurrentPage(event) {\n  if (event.target.nodeName !== 'BUTTON') return currentPage;\n  const targetPageText = event.target.textContent;\n\n  if (!isNaN(Number(targetPageText))) targetPage = Number(targetPageText);\n  if (targetPageText === '>' && currentPage === totalPages) return totalPages;\n  if (targetPageText === '>') targetPage = currentPage + 1;\n  if (targetPageText === '<' && currentPage === 1) return 1;\n  if (targetPageText === '<') targetPage = currentPage - 1;\n  if (targetPageText === ' ...') targetPage = currentPage - (pagiLength - 4);\n  if (targetPageText === '... ') targetPage = currentPage + (pagiLength - 4);\n  if (targetPage === currentPage) return currentPage;\n  currentPage = targetPage;\n  return currentPage;\n}\n\n/**\n * Form an array of chars to be displayed on pagination buttons\n * @param {Number} currentPage - the current active page\n * @param {Number} totalPages - the total number of pages\n * @returns {Array} of text content for buttons in pagination line\n */\nfunction paginate(currentPage, totalPages) {\n  const output = [];\n  let startPage;\n  let endPage;\n  const offsetPages = Math.floor(pagiLength / 2);\n  if (currentPage < 1) {\n    currentPage = 1;\n  } else if (currentPage > totalPages) {\n    currentPage = totalPages;\n  }\n  if (totalPages <= pagiLength) {\n    startPage = 1;\n    endPage = totalPages;\n  } else {\n    if (currentPage <= offsetPages) {\n      startPage = 1;\n      endPage = pagiLength;\n    } else if (currentPage + offsetPages >= totalPages) {\n      startPage = totalPages - offsetPages * 2;\n      endPage = totalPages;\n    } else {\n      startPage = currentPage - offsetPages;\n      endPage = currentPage + offsetPages;\n    }\n  }\n  for (let i = startPage; i <= endPage; i += 1) {\n    output.push(i);\n  }\n  if (pagiLength === 9) {\n    output.splice(0, 1, 1);\n    output.splice(output.length - 1, 1, totalPages);\n    if (currentPage - 1 > offsetPages && totalPages > pagiLength) {\n      output.splice(1, 1, ' ...');\n    }\n    if (currentPage + 1 + offsetPages < totalPages && totalPages > pagiLength)\n      output.splice(output.length - 2, 1, '... ');\n  }\n  return output;\n}\n\n/**\n * Marks up pagination line\n * @param {Array} output - text content for buttons in pagination line output\n * @param {DOM element} paginationRef - where to put pagination line\n */\nfunction markupPagination(output, paginationRef) {\n  let markup = output.reduce((acc, item) => {\n    const pagiClass =\n      item === currentPage\n        ? 'class=\"pagination-button pagination-button-current\"'\n        : 'class=\"pagination-button\"';\n    return (acc += `<button type=\"button\" ${pagiClass}>${item}</button>`);\n  }, ``);\n  if (totalPages > pagiLength && currentPage !== 1) {\n    markup =\n      `<button type=\"button\" class=\"pagination-button\">&lt;</button>` + markup;\n  }\n  if (totalPages > pagiLength && currentPage !== totalPages) {\n    markup += `<button type=\"button\" class=\"pagination-button\">&gt;</button>`;\n  }\n  paginationRef.innerHTML = '';\n  paginationRef.insertAdjacentHTML('beforeend', markup);\n}\n","import {\n  updatePagination,\n  getCurrentPage,\n  paginationRef,\n} from './simple-pagination';\n\nlet totalPages = 100;\nlet currentPage = 1;\npaginationRef.addEventListener('click', onPaginationButtonClick);\n\nupdatePagination(currentPage, totalPages);\n\nfunction onPaginationButtonClick(event) {\n  currentPage = getCurrentPage(event);\n  updatePagination(currentPage, totalPages);\n  // await fetch('https://...&page=currentPage')\n}\n"],"names":["$27cf19fc2e336bc0$var$targetPage","$27cf19fc2e336bc0$var$totalPages","$27cf19fc2e336bc0$export$282ede1754680aae","document","querySelector","$27cf19fc2e336bc0$var$currentPage","$27cf19fc2e336bc0$var$media","window","matchMedia","$27cf19fc2e336bc0$var$pagiLength","matches","$27cf19fc2e336bc0$export$909ec5aabce1b1f7","page","pages","output2","paginationRef1","markup","reduce","acc","item","concat","innerHTML","insertAdjacentHTML","$27cf19fc2e336bc0$var$markupPagination","currentPage1","totalPages1","startPage","endPage","output1","offsetPages","Math","floor","i","push","splice","length","$27cf19fc2e336bc0$var$paginate","$27cf19fc2e336bc0$export$7945ba8eb1c827e6","event","target","nodeName","targetPageText","textContent","isNaN","Number","addEventListener","$2bec02fa672acf9e$var$currentPage"],"version":3,"file":"index.b2c76116.js.map"}